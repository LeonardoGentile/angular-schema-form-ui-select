angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/multi.html",'<div ng-init="form.select_models=(form.schema.items| whereMulti : \'value\' : ($$value$$||[]))" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" class="form-group"><label ng-show="showTitle()" class="control-label">{{form.title}}</label><div ng-controller="UiSelectController" class="form-group"><ui-select ng-if="!(form.options.tagging||false)" ng-model="form.select_models" multiple="" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" sortable-options="{{form.sortableOptions}}" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}" class="ui-select-match">{{$item.label}}</ui-select-match><ui-select-choices class="ui-select-choices" refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-bind-html="item.label | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span></div></ui-select-choices></ui-select><ui-select ng-if="(form.options.tagging||false) && !(form.options.groupBy||false)" ng-model="form.select_models" multiple="" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}" class="ui-select-match">{{$item.label}}&nbsp;<small>{{($item.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><ui-select ng-if="(form.options.tagging||false) && (form.options.groupBy || false)" multiple="" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}&nbsp;<small>{{($item.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" group-by="form.options.groupBy" refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><input type="hidden" toggle-model="" ng-model="insideModel" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" class="form-control-feedback"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/uiselect/single.html",'<div ng-init="select_models=(form.schema.items | where : {value: $$value$$})" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" class="form-group"><label ng-show="showTitle()" class="control-label">{{form.title}}</label><div ng-controller="UiSelectController" ng-init="select_model.selected=select_models[0]" class="form-group"><ui-select ng-if="!(form.options.tagging||false)" ng-model="select_model.selected" ng-disabled="form.disabled" theme="bootstrap" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}" class="ui-select-match">{{select_model.selected.label}}</ui-select-match><ui-select-choices refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }" class="ui-select-choices"><div ng-bind-html="item.label | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span></div></ui-select-choices></ui-select><ui-select ng-if="(form.options.tagging||false) && !(form.options.groupBy||false)" ng-model="select_model.selected" ng-disabled="form.disabled" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" theme="bootstrap" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}" class="ui-select-match">{{select_model.selected.label}}&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices refresh="form.options.refreshMethod(form.schema, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }" class="ui-select-choices"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><ui-select ng-if="(form.options.tagging||false) && (form.options.groupBy||false)" ng-model="select_model.selected" ng-disabled="form.disabled" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" theme="bootstrap" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{select_model.selected.label}}&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices group-by="form.options.groupBy" refresh="form.options.refreshMethod(form.schema, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }" class="ui-select-choices"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><input type="hidden" toggle-single-model="" ng-model="insideModel" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" class="form-control-feedback"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider","sfBuilderProvider",function(e,t,s,i){var o=function(t,i,o){if("string"===i.type&&"uiselect"==i.format){var l=e.stdFormObj(t,i,o);return l.key=o.path,l.type="uiselect",o.lookup[s.stringify(o.path)]=l,l}};e.defaults.string.unshift(o);var l=function(t,i,o){if("number"===i.type&&"uiselect"==i.format){var l=e.stdFormObj(t,i,o);return l.key=o.path,l.type="uiselect",o.lookup[s.stringify(o.path)]=l,l}};e.defaults.number.unshift(l);var r=function(t,i,o){if("array"===i.type&&"uiselect"==i.format){var l=e.stdFormObj(t,i,o);return l.key=o.path,l.type="uimultiselect",o.lookup[s.stringify(o.path)]=l,l}};e.defaults.array.unshift(r),t.defineAddOn("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/single.html",i.stdBuilders),t.defineAddOn("bootstrapDecorator","uimultiselect","directives/decorators/bootstrap/uiselect/multi.html",i.stdBuilders)}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(e){e.$parent.$watch("select_model.selected",function(){void 0!=e.$parent.select_model.selected&&(e.$parent.insideModel=e.$parent.select_model.selected.value,e.$parent.ngModel.$setViewValue(e.$parent.select_model.selected.value))})}]}}).directive("toggleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope","sfSelect",function(e,t){var s=t(e.$parent.form.key,e.$parent.model);angular.isUndefined(s)&&(s=[],t(e.$parent.form.key,e.$parent.model,s)),e.$parent.$watch("form.select_models",function(){0==e.$parent.form.select_models.length?(e.$parent.insideModel=e.$parent.$$value$$,void 0!=e.$parent.ngModel.$viewValue&&e.$parent.ngModel.$setViewValue(e.$parent.form.select_models)):(e.$parent.insideModel=e.$parent.form.select_models,e.$parent.ngModel.$setViewValue(e.$parent.form.select_models))},!0)}]}}).filter("whereMulti",function(){return function(e,t,s){var i=[];return angular.isArray(s)?s.forEach(function(s){for(var o=0;o<e.length;o++)if(s==e[o][t]){i.push(e[o]);break}}):i=e,i}}).filter("propsFilter",function(){return function(e,t){var s=[];return angular.isArray(e)?e.forEach(function(e){for(var i=!1,o=Object.keys(t),l=0;l<o.length;l++){var r=o[l];if(e.hasOwnProperty(r)){var a=t[r].toLowerCase();if(0===e[r].toString().toLowerCase().indexOf(a)||-1!==e[r].toString().toLowerCase().indexOf(" "+a)){i=!0;break}}}i&&s.push(e)}):s=e,s}}).controller("UiSelectController",["$scope","$http",function(e,t){e.fetchResult=function(s,i,o){if(i)if(i.callback){var l="function"==typeof i.callback?i.callback:new Function(i.callback);s.items=l(s,i,o),console.log("items",s.items)}else{if(i.http_post)return t.post(i.http_post.url,i.http_post.parameter).then(function(e){s.items=e.data,console.log("items",s.items)},function(e,t){alert("Loading select items failed (URL: '"+String(i.http_post.url)+"' Parameter: "+String(i.http_post.parameter)+"\nError: "+t)});if(i.http_get)return t.get(i.http_get.url,i.http_get.parameter).then(function(e){s.items=e.data,console.log("items",s.items)},function(e,t){alert("Loading select items failed (URL: '"+String(i.http_get.url)+"\nError: "+t)});if(i.async){var l="function"==typeof i.async?i.async:new Function(i.async);return l(s,i,o).then(function(t){s.items=t.data,e.$select.selected=_.findWhere(s.items,{selected:!0}),console.log("items",s.items)},function(e,t){alert("Loading select items failed(Options: '"+String(i)+"\nError: "+t)})}}}}]);